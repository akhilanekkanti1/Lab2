View(pokemon1)
pokemon1
pokemon1[[1]]
pokemon1[[1]][1]
pokemon1[[1]][2]
pokemon1
pokemon1[[2]]$pokemon
pokemon1[[1]]$pokemon
pokemon1[[1]]$pokemon$name
pokemon1[[1]][["pokemon"]][["name"]]
#map
by_pokemon <- map(abs, "pokemon")
View(tbl3)
#map
by_pokemon <- map(abs, "pokemon") %>%
map_dbl("pokemon")
#map
by_pokemon <- map(abs, "pokemon") %>%
map_chr(by_pokemon)
map_chr(by_pokemon, "pokemon")
map_chr(by_pokemon, "name")
#map
by_pokemon <- map(abs, "pokemon")
map_chr(by_pokemon, .x["pokemon"])
map_chr(by_pokemon, ~list(.x$pokemon))
map_chr(by_pokemon, ~list(.x$pokemon$name))
map_chr(by_pokemon, ~list(.x$pokemon$name))
map(by_pokemon, ~list(.x$pokemon$name))
map(by_pokemon, ~paste0(.x$pokemon$name))
map(by_pokemon, ~paste0(.x$pokemon))
list1 <- map(by_pokemon, [1])
list1 <- by_pokemon[1]
list1
View(list1)
pokemon1[[1]][["pokemon"]][["name"]]
map_chr(list1, ~list([[.x]][["pokemon"]][["name"]]))
list1[["pokemon"]][["name"]]
list1[[1]][["pokemon"]][["name"]]
list1[1][["pokemon"]][["name"]]
list1[1]
list1[1][[1]][["name"]]
list1[1][[1]]
list1[1][[1]]["pokemon"]][["name"]]
list1[1][[1]][["pokemon"]][["name"]]
list1[1][[1]]["pokemon"]["name"]
list1[1]
list1[1][[1]]
list1[1][[1]]
View(tbl3)
----------------------------------------------
stench <- by_pokemon[1]
stench <- by_pokemon[1]
View(stench)
map(stench, "pokemon")
map(stench, [[1]])
map(stench, [1])
stench <- by_pokemon[1]
map(stench, [1:5])
map(stench, [1:5, "pokemon"])
map(stench, ~list[1:5, "pokemon"])
map_chr(stench, ~list[1:5, "pokemon"])
map_chr(stench, ~list("pokemon")
map_chr(stench, ~list("pokemon"))
stench <- by_pokemon[1]
map_chr(stench, ~paste("pokemon"))
map_chr(stench, ~paste(.x$pokemon))
map(stench, ~paste(.x$pokemon))
map(stench, c("pokemon"))
stench[1]
stench[[1]]
attributes(stench)
stench <- by_pokemon[1]
attributes(stench)
str(stench)
stench[1]
stench[[1]]
stench[[[1]]]
#extract name of 1 pokemon
abs[[1]]$pokemon[[1]]$pokemon$name
abs[[1]]$pokemon[[2]]$pokemon$name
abs[[1]][["pokemon"]][[1]][["pokemon"]][["name"]]
abs[[1]][["pokemon"]][[2]][["pokemon"]][["name"]]
#individual level
pokemon1 <- by_pokemon[[1]][1]
pokemon1[[1]]$pokemon$name
pokemon1[[1]][["pokemon"]][["name"]]
#extract pokemon list
by_pokemon <- map(abs, "pokemon")
stench <- by_pokemon[1]
str(stench)
map_chr(list1, ~list([[.x]][["pokemon"]][["name"]]))
#Joanna's code
number_of_pokemon <- map_dbl(abs, ~length(.x$pokemon))
map(by_pokemon, ~paste0(.x$pokemon))
stench <- by_pokemon[1]
str(stench)
stench<- stench[1]
stench[1]
stench <- by_pokemon[1]
library(tidyverse)
#install.packages("repurrrsive")
library(repurrrsive)
library(httr)
abilities <- paste0("https://pokeapi.co/api/v2/ability/", 1:5)
abilities
abs <- map(abilities, ~GET(.x) %>%
content("parsed"))
abs
abilities
#Use the parsed data to create a data frame that has the given ability, and the number of pokemon with that ability.
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
#extract name of 1 pokemon
abs[[1]]$pokemon[[1]]$pokemon$name
abs[[1]]$pokemon[[2]]$pokemon$name
abs[[1]][["pokemon"]][[1]][["pokemon"]][["name"]]
abs[[1]][["pokemon"]][[2]][["pokemon"]][["name"]]
#extract individual level
pokemon1 <- by_pokemon[[1]][1]
#extract pokemon list
by_pokemon <- map(abs, "pokemon")
stench <- by_pokemon[1]
stench
#extract individual level
pokemon1 <- by_pokemon[[1]][1]
pokemon1
pokemon1[[1]]$pokemon$name
pokemon1[[1]][["pokemon"]][["name"]]
library(httr)
ability1 <- GET("https://pokeapi.co/api/v2/ability/1") %>%
content("parsed")
attributes(ability1)
str(ability1)
#name of the ability
ability1$name
#number of pokemon with this ability
length(ability1$pokemon)
abilities <- paste0("https://pokeapi.co/api/v2/ability/", 1:5)
abilities
abs <- map(abilities, ~GET(.x) %>%
content("parsed"))
abs
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
ability <- map_chr(abs, "name")
ability <- map_chr(abs, "name")
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
# Chunk 1: setup
library(tidyverse)
#install.packages("repurrrsive")
library(repurrrsive)
library(httr)
# Chunk 2: runthecode
file <- "https://github.com/datalorax/esvis/raw/master/data/benchmarks.rda"
load(url(file))
head(benchmarks)
# Chunk 3: recode_season
benchmarks <- benchmarks %>%
as_tibble() %>%
mutate(wave = case_when(season == "Fall" ~ 0,
season == "Winter" ~ 1,
TRUE ~ 2))
benchmarks
# Chunk 4: fit_lm
stu_split <- split(benchmarks, benchmarks$sid)
mods <- map(stu_split, ~lm(math ~ wave, data = .x))
mods
# Chunk 5: plot_slope_mean
coefs <- map(mods, ~coef(.x))
#simplify version, since only one function
#coefs <- map(mods, coef)
slopes <- map_dbl(coefs, "wave")
str(slopes)
relation <- tibble(student = names(slopes),
slope = slopes)
ggplot(relation, aes(slope)) +
geom_histogram(fill = "mediumorchid",
color = "white") +
geom_vline(aes(xintercept = mean(slope, na.rm = TRUE)))
# Chunk 6: number_characters
head(sw_films)
length(sw_films)
#for only the first film
sw_films[[1]]$characters
length(sw_films[[1]]$characters)
#using map
chr_count <- map_dbl(sw_films, ~length(.x$characters))
chr_count
chr_names <- map_chr(sw_films, "title")
chr_names
tibble(Film = chr_names,
Characters = chr_count)
# Chunk 7: species_hair_colors
str(sw_species)
hc <- map_chr(sw_species, "hair_colors")
hc
species <- map_chr(sw_species, "name")
species
tbl2 <- tibble(Species = species,
`Hair Colors` = hc) %>%
filter(`Hair Colors` != "n/a" &
`Hair Colors` != "none" &
`Hair Colors` != "unknown")
tbl2
# Chunk 8: abilites_pokemon
library(httr)
ability1 <- GET("https://pokeapi.co/api/v2/ability/1") %>%
content("parsed")
attributes(ability1)
str(ability1)
#name of the ability
ability1$name
#number of pokemon with this ability
length(ability1$pokemon)
# Chunk 10
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
# Chunk 11: bonus_poke_names
#extract name of 1 pokemon from original list of 5 abilities
abs[[1]]$pokemon[[1]]$pokemon$name
abs[[1]]$pokemon[[2]]$pokemon$name
#another way to extract name of 1 pokemon
abs[[1]][["pokemon"]][[1]][["pokemon"]][["name"]]
abs[[1]][["pokemon"]][[2]][["pokemon"]][["name"]]
#extract 1 pokemon list and 1 ability
by_pokemon <- map(abs, "pokemon")
stench <- by_pokemon[1]
#extract individual level
pokemon1 <- by_pokemon[[1]][1]
pokemon1[[1]]$pokemon$name
pokemon1[[1]][["pokemon"]][["name"]]
library(httr)
ability1 <- GET("https://pokeapi.co/api/v2/ability/1") %>%
content("parsed")
attributes(ability1)
str(ability1)
#name of the ability
ability1$name
#number of pokemon with this ability
length(ability1$pokemon)
abilities <- paste0("https://pokeapi.co/api/v2/ability/", 1:5)
abilities
abs <- map(abilities, ~GET(.x) %>%
content("parsed"))
abs
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
install.packages(c("backports", "bayestestR", "callr", "effectsize", "fs", "ggalluvial", "glue", "isoband", "lme4", "lmerTest", "lubridate", "parameters", "performance", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "sf", "sjmisc", "survey", "tibble", "tinytex", "xfun", "xml2"))
install.packages(c("backports", "bayestestR", "callr", "effectsize", "fs", "ggalluvial", "glue", "isoband", "lme4", "lmerTest", "lubridate", "parameters", "performance", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "sf", "sjmisc", "survey", "tibble", "tinytex", "xfun", "xml2"))
install.packages(c("backports", "bayestestR", "callr", "effectsize", "fs", "ggalluvial", "glue", "isoband", "lme4", "lmerTest", "lubridate", "parameters", "performance", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "reshape2", "sf", "sjmisc", "survey", "tibble", "tinytex", "xfun", "xml2"))
# Chunk 1: setup
library(tidyverse)
#install.packages("repurrrsive")
library(repurrrsive)
library(httr)
# Chunk 2: runthecode
file <- "https://github.com/datalorax/esvis/raw/master/data/benchmarks.rda"
load(url(file))
head(benchmarks)
# Chunk 3: recode_season
benchmarks <- benchmarks %>%
as_tibble() %>%
mutate(wave = case_when(season == "Fall" ~ 0,
season == "Winter" ~ 1,
TRUE ~ 2))
benchmarks
# Chunk 4: fit_lm
stu_split <- split(benchmarks, benchmarks$sid)
mods <- map(stu_split, ~lm(math ~ wave, data = .x))
mods
# Chunk 5: plot_slope_mean
coefs <- map(mods, ~coef(.x))
#simplify version, since only one function
#coefs <- map(mods, coef)
slopes <- map_dbl(coefs, "wave")
str(slopes)
relation <- tibble(student = names(slopes),
slope = slopes)
ggplot(relation, aes(slope)) +
geom_histogram(fill = "mediumorchid",
color = "white") +
geom_vline(aes(xintercept = mean(slope, na.rm = TRUE)))
# Chunk 6: number_characters
head(sw_films)
length(sw_films)
#for only the first film
sw_films[[1]]$characters
length(sw_films[[1]]$characters)
#using map
chr_count <- map_dbl(sw_films, ~length(.x$characters))
chr_count
chr_names <- map_chr(sw_films, "title")
chr_names
tibble(Film = chr_names,
Characters = chr_count)
# Chunk 7: species_hair_colors
str(sw_species)
hc <- map_chr(sw_species, "hair_colors")
hc
species <- map_chr(sw_species, "name")
species
tbl2 <- tibble(Species = species,
`Hair Colors` = hc) %>%
filter(`Hair Colors` != "n/a" &
`Hair Colors` != "none" &
`Hair Colors` != "unknown")
tbl2
# Chunk 8: abilites_pokemon
library(httr)
ability1 <- GET("https://pokeapi.co/api/v2/ability/1") %>%
content("parsed")
attributes(ability1)
str(ability1)
#name of the ability
ability1$name
#number of pokemon with this ability
length(ability1$pokemon)
# Chunk 10
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
# Chunk 11: bonus_poke_names
#extract name of 1 pokemon from original list of 5 abilities
abs[[1]]$pokemon[[1]]$pokemon$name
abs[[1]]$pokemon[[2]]$pokemon$name
#another way to extract name of 1 pokemon
abs[[1]][["pokemon"]][[1]][["pokemon"]][["name"]]
abs[[1]][["pokemon"]][[2]][["pokemon"]][["name"]]
#extract 1 pokemon list and 1 ability
by_pokemon <- map(abs, "pokemon")
stench <- by_pokemon[1]
#extract individual level
pokemon1 <- by_pokemon[[1]][1]
pokemon1[[1]]$pokemon$name
pokemon1[[1]][["pokemon"]][["name"]]
rlang::last_error()
`rlang::last_trace()`
rlang::last_trace()
install.packages(c("glue", "purrr", "Rcpp", "tibble"))
# Chunk 1: setup
library(tidyverse)
#install.packages("repurrrsive")
library(repurrrsive)
library(httr)
# Chunk 2: runthecode
file <- "https://github.com/datalorax/esvis/raw/master/data/benchmarks.rda"
load(url(file))
head(benchmarks)
# Chunk 3: recode_season
benchmarks <- benchmarks %>%
as_tibble() %>%
mutate(wave = case_when(season == "Fall" ~ 0,
season == "Winter" ~ 1,
TRUE ~ 2))
benchmarks
# Chunk 4: fit_lm
stu_split <- split(benchmarks, benchmarks$sid)
mods <- map(stu_split, ~lm(math ~ wave, data = .x))
mods
# Chunk 5: plot_slope_mean
coefs <- map(mods, ~coef(.x))
#simplify version, since only one function
#coefs <- map(mods, coef)
slopes <- map_dbl(coefs, "wave")
str(slopes)
relation <- tibble(student = names(slopes),
slope = slopes)
ggplot(relation, aes(slope)) +
geom_histogram(fill = "mediumorchid",
color = "white") +
geom_vline(aes(xintercept = mean(slope, na.rm = TRUE)))
# Chunk 6: number_characters
head(sw_films)
length(sw_films)
#for only the first film
sw_films[[1]]$characters
length(sw_films[[1]]$characters)
#using map
chr_count <- map_dbl(sw_films, ~length(.x$characters))
chr_count
chr_names <- map_chr(sw_films, "title")
chr_names
tibble(Film = chr_names,
Characters = chr_count)
# Chunk 7: species_hair_colors
str(sw_species)
hc <- map_chr(sw_species, "hair_colors")
hc
species <- map_chr(sw_species, "name")
species
tbl2 <- tibble(Species = species,
`Hair Colors` = hc) %>%
filter(`Hair Colors` != "n/a" &
`Hair Colors` != "none" &
`Hair Colors` != "unknown")
tbl2
# Chunk 8: abilites_pokemon
library(httr)
ability1 <- GET("https://pokeapi.co/api/v2/ability/1") %>%
content("parsed")
attributes(ability1)
str(ability1)
#name of the ability
ability1$name
#number of pokemon with this ability
length(ability1$pokemon)
# Chunk 10
ability <- map_chr(abs, "name")
#extract length for 1 list
length(abs[[1]]$pokemon)
#convert into map
count <- map(abs, list("pokemon")) %>%
map_dbl(~length(.x))
#another way to coutn # of pokemon with each ability:
map_dbl(abs, ~length(.x$pokemon))
#create tibble
tibble(Ability = str_to_title(ability),
`Number of Pokemon` = count)
# Chunk 11: bonus_poke_names
#extract name of 1 pokemon from original list of 5 abilities
abs[[1]]$pokemon[[1]]$pokemon$name
abs[[1]]$pokemon[[2]]$pokemon$name
#another way to extract name of 1 pokemon
abs[[1]][["pokemon"]][[1]][["pokemon"]][["name"]]
abs[[1]][["pokemon"]][[2]][["pokemon"]][["name"]]
#extract 1 pokemon list and 1 ability
by_pokemon <- map(abs, "pokemon")
stench <- by_pokemon[1]
#extract individual level
pokemon1 <- by_pokemon[[1]][1]
pokemon1[[1]]$pokemon$name
pokemon1[[1]][["pokemon"]][["name"]]
#print the first 3 model
mods[1:3]
head(sw_films)
sw_films
length(sw_films)
sw_films
sw_films[1]
str(ability1)
abs
abs <- map(abilities, ~GET(.x) %>%
content("parsed"))
abilities <- paste0("https://pokeapi.co/api/v2/ability/", 1:5)
abilities
abs <- map(abilities, ~GET(.x) %>%
content("parsed"))
abs
abilities <- paste0("https://pokeapi.co/api/v2/ability/", 1:5)
abilities
abs <- map(abilities, ~GET(.x) %>%
content("parsed"))
abs
head(abs)
sw_species
